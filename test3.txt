<bound method Network.arch_parameters of Network(
  (_criterion): CrossEntropyLoss()
  (stem): Sequential(
    (0): Conv2d(1, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (cells): ModuleList(
    (0): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (1): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (2): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (3): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (4): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (5): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (6): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (7): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (8): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (9): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (10): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (11): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (1): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (2): Identity()
            (3): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
          )
        )
      )
      (_bns): ModuleList()
    )
  )
  (global_pooling): AdaptiveAvgPool2d(output_size=1)
  (classifier): Linear(in_features=256, out_features=10, bias=True)
)>
-------------------------------------------------
tensor([[-7.2845e-04, -9.2711e-04, -3.8492e-04, -2.6853e-04,  7.7623e-04],
        [ 5.8861e-04, -3.8637e-04,  8.1681e-04, -2.4477e-03,  2.4424e-04],
        [ 4.1651e-04,  1.3913e-03, -9.3015e-04,  8.5549e-04, -1.4998e-04],
        [-4.9841e-04, -7.7569e-04,  5.7822e-04, -3.5393e-04, -7.0178e-04],
        [-8.2903e-04, -2.4293e-05,  7.7423e-04,  6.7209e-04, -6.9468e-04],
        [ 6.5569e-04, -9.6946e-04, -2.1901e-04, -6.7496e-04,  9.6232e-04],
        [-1.8668e-03, -3.8549e-04,  1.0701e-03, -1.2440e-03,  3.4724e-04],
        [ 8.1658e-04, -1.5141e-04,  6.4642e-05, -1.3710e-03, -1.4402e-03],
        [ 8.6003e-04, -1.6625e-04,  4.7712e-04, -1.2498e-04, -1.5945e-04],
        [-2.0711e-04, -3.0964e-05, -1.7075e-03, -9.1290e-04, -1.5830e-03],
        [-7.4582e-04, -5.4273e-04,  5.0340e-05,  1.2077e-03, -9.1801e-04],
        [ 7.6141e-05, -1.2139e-03, -2.9506e-04,  2.8936e-03,  1.5775e-03],
        [ 2.8837e-04,  4.9888e-04, -2.1749e-04, -2.8002e-04, -1.0714e-03],
        [-3.8443e-04, -4.7205e-04, -3.0968e-04,  1.2029e-03, -8.6122e-04]],
       device='cuda:0', requires_grad=True)
-------------------------------------------------
tensor([[ 5.2075e-04,  4.2106e-04,  1.3061e-03, -6.3357e-04, -1.1793e-03],
        [-6.8234e-04,  8.9074e-04, -6.7835e-05, -2.4575e-04, -8.0473e-04],
        [ 1.2398e-03,  1.3712e-03, -9.1591e-04, -1.3668e-03,  3.5527e-04],
        [-2.4274e-04,  1.2643e-04, -2.9005e-04, -3.6931e-04, -8.7940e-04],
        [ 7.4380e-04, -2.5042e-03, -8.0281e-04, -3.3941e-04,  2.0753e-03],
        [ 1.3749e-03,  1.7398e-03, -6.5359e-04,  1.0975e-03,  7.9768e-04],
        [-1.1558e-03,  7.4621e-04,  1.1328e-03,  1.2288e-03,  4.9763e-04],
        [ 1.5217e-03,  1.1046e-03, -4.5830e-04,  1.0507e-03, -5.9684e-04],
        [ 8.3095e-04, -1.5717e-04, -1.3413e-03,  8.4229e-04,  1.3402e-04],
        [-6.3814e-04,  7.1977e-04,  1.1722e-03,  8.3616e-04, -9.7488e-04],
        [-7.0290e-04, -8.8019e-04,  2.3660e-04,  4.6289e-05,  2.4268e-04],
        [ 1.9246e-03, -7.6444e-05,  2.9332e-04,  4.9957e-04,  1.2204e-04],
        [ 5.9680e-05,  3.3373e-04, -1.2256e-03,  1.6810e-03,  1.1237e-04],
        [ 1.4142e-03, -1.0139e-03, -1.0807e-03,  1.2014e-03,  1.1880e-03]],
       device='cuda:0', requires_grad=True)
